# SPDX-License-Identifier: BSD-3-Clause

config = configuration_data()
config.set('AUTOGEN_HEADER', '/* THIS FILE IS AUTOGENERATED, DO NOT EDIT */')
# Version Information
config.set('VERSION_NUMBER', '@VERSION_NUMBER@')
config.set('COMPILER', cxx_n.get_id())
config.set('COMPILER_VERSION', cxx_n.version())
# Platform information
config.set('TARGET_SYS', target_machine.system())
config.set('TARGET_ARCH', target_machine.cpu())
config.set('TARGET_ENDIAN', 'endian_t::@0@'.format(target_machine.endian()))

config.set('BUILD_SYS', build_machine.system())
config.set('BUILD_ARCH', build_machine.cpu())
config.set('BUILD_ENDIAN', 'endian_t::@0@'.format(build_machine.endian()))

# Directories
config.set('PREFIX', get_option('prefix'))
# Misc
config.set('BUGREPORT_URL', get_option('bugreport_url'))

if (cxx_n.get_id() == 'gcc' and cxx_n.version().version_compare('<9.0.0')) or (cxx_n.get_id() == 'clang' and cxx.version().version_compare('<9.0.0'))
	if cxx_n.has_header('experimental/filesystem') == false
		error('Unable to find C++17 experimental/filesystem header')
	endif
	libalfheim_deps += [ cxx_n.find_library('libstdc++fs', required: true) ]
	config.set('UWUASM_CPPFS_EXPERIMENTAL', true)
endif


git = find_program('git', required: false, native: true)
if git.found()
	git_hash = run_command(git, 'rev-parse', '--short', 'HEAD').stdout().strip()
	if run_command(git, 'diff', '--quiet').returncode() != 0
		git_hash += '-dirty'
	endif
	config.set('VERSION_NUMBER', '@0@ @1@'.format(meson.project_version(), git_hash))
endif


uwuefi_cfg_header = configure_file(
	configuration: config,
	input: 'config.hh.in',
	output: 'config.hh'
)

libuwuefi_srcs = files([

])


subdir('arch')

uwuefi_inc = include_directories('.')

uwuefi_headers = files([

])

install_headers(
	uwuefi_headers + [ uwuefi_cfg_header ],
	subdir: 'uwuefi'
)


libuwuefi = static_library(
	'uwuefi',
	libuwuefi_srcs,
	include_directories: [
		uwuefi_inc,
		uwuefi_arch,
	],
	gnu_symbol_visibility: 'inlineshidden',
	implicit_include_directories: false,
	pic: true,
	install: (not meson.is_subproject()),
)
